" ==================================================================================================================================================
"    __/\\\________/\\\__/\\\\\\\\\\\__/\\\\____________/\\\\____/\\\\\\\\\____________/\\\\\\\\\_
"     _\/\\\_______\/\\\_\/////\\\///__\/\\\\\\________/\\\\\\__/\\\///////\\\_______/\\\////////__
"      _\//\\\______/\\\______\/\\\_____\/\\\//\\\____/\\\//\\\_\/\\\_____\/\\\_____/\\\/___________
"       __\//\\\____/\\\_______\/\\\_____\/\\\\///\\\/\\\/_\/\\\_\/\\\\\\\\\\\/_____/\\\_____________
"        ___\//\\\__/\\\________\/\\\_____\/\\\__\///\\\/___\/\\\_\/\\\//////\\\____\/\\\_____________
"         ____\//\\\/\\\_________\/\\\_____\/\\\____\///_____\/\\\_\/\\\____\//\\\___\//\\\____________
"          _____\//\\\\\__________\/\\\_____\/\\\_____________\/\\\_\/\\\_____\//\\\___\///\\\__________
"           ______\//\\\________/\\\\\\\\\\\_\/\\\_____________\/\\\_\/\\\______\//\\\____\////\\\\\\\\\_
"            _______\///________\///////////__\///______________\///__\///________\///________\/////////__
" ==================================================================================================================================================


augroup FileType_Local_tabwidth " {{{
  autocmd!
  au FileType nginx setlocal tabstop=4 shiftwidth=4 expandtab
  au FileType php setlocal tabstop=4 shiftwidth=4 expandtab softtabstop=4
  au FileType prisma setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType scheme setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType vim setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType sh setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType zsh setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType javascript setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType pegjs setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType pug setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType html setlocal tabstop=2 shiftwidth=2 expandtab
  au FileType vue setlocal tabstop=2 shiftwidth=2 expandtab
  au FileType eruby setlocal tabstop=2 shiftwidth=2 expandtab
  au FileType scss setlocal tabstop=2 shiftwidth=2 expandtab iskeyword+=@-@
  au FileType ruby setlocal tabstop=2 shiftwidth=2 expandtab
  au FileType cs setlocal tabstop=4 shiftwidth=4 expandtab
  au FileType html.erb setlocal tabstop=2 shiftwidth=2 expandtab
  au FileType html.handlebars setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType apache setlocal commentstring=#\ %s
  au FileType gitconfig setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType make set noexpandtab
augroup END
" }}}

" }}}


function! ToggleBg()
  if &bg == 'dark'
    let &bg = 'light'
    highlight colorcolumn guibg=#48ff67
  else
    let &bg='dark'
    highlight colorcolumn guibg=#A676EF
  endif
endfunction

function! RenameFile()
  let old_name = expand("%")
  let new_name = input('New file Name:', expand('%'), 'file')
  if new_name !=# '' && new_name !=# old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction

function! VisualSelection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'b'
    execute "normal ?" . l:pattern . "^M"
  elseif a:direction == 'gv'
    call CmdLine("Ack \"" . l:pattern . "\" " )
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
  elseif a:direction == 'f'
    execute "normal /" . l:pattern . "^M"
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction "--------------FloatingWindows {{{
if has('nvim')
  function! OpenFloatTerm(...)
    " Configuration
    let height = float2nr((&lines - 2) * 0.6)
    let row = float2nr((&lines - height) / 2)
    let width = float2nr(&columns * 0.6)
    let col = float2nr((&columns - width) / 2)
    " Border Window
    let border_opts = {
          \ 'relative': 'editor',
          \ 'row': row - 1,
          \ 'col': col - 2,
          \ 'width': width + 4,
          \ 'height': height + 2,
          \ 'style': 'minimal'
          \ }
    " Terminal Window
    let opts = {
          \ 'relative': 'editor',
          \ 'row': row,
          \ 'col': col,
          \ 'width': width,
          \ 'height': height,
          \ 'style': 'minimal'
          \ }
    let top = "╭" . repeat("─", width + 2) . "╮"
    let mid = "│" . repeat(" ", width + 2) . "│"
    let bot = "╰" . repeat("─", width + 2) . "╯"
    let lines = [top] + repeat([mid], height) + [bot]
    let bbuf = nvim_create_buf(v:false, v:true)
    call nvim_buf_set_lines(bbuf, 0, -1, v:true, lines)
    let s:float_term_border_win = nvim_open_win(bbuf, v:true, border_opts)
    let buf = nvim_create_buf(v:false, v:true)
    let s:float_term_win = nvim_open_win(buf, v:true, opts)
    " Styling
    call setwinvar(s:float_term_border_win, '&winhl', 'Normal:Normal')
    call setwinvar(s:float_term_win, '&winhl', 'Normal:Normal')
    if a:0 == 0
      terminal
    else
      call termopen(a:1)
    endif
    startinsert
    " Close border window when terminal window close
    autocmd TermClose * ++once :bd! | call nvim_win_close(s:float_term_border_win, v:true)
  endfunction
endif
" }}}

"--------------visuals--------------"







" {{{


" ---------EASY_MOTION-----{{{
let g:EasyMotion_do_mapping = 0
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case-insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
" }}}


" Vimspector config
" let g:vimspector_enable_mappings = 'VISUAL_STUDIO'

" Return to last edit position when opening files (You want this!)


"Automatically source the Vimrc file on save.
augroup autosourcing
  autocmd!
  autocmd BufWritePost *vimrc source %
augroup END

" Folding cheat sheet
" zR    open all folds
" zM    close all folds
" za    toggle folds at cursor position
" zj    move down to start of next fold
" zk    move up to end of previous fold
"
" ":p   print last executed command to the buffer
" @=    reruns the last command
" gv    select the previous visual mode
" co .  copy the range to the current line, eg: co +3