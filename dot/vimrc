" ==================================================================================================================================================
"    __/\\\________/\\\__/\\\\\\\\\\\__/\\\\____________/\\\\____/\\\\\\\\\____________/\\\\\\\\\_
"     _\/\\\_______\/\\\_\/////\\\///__\/\\\\\\________/\\\\\\__/\\\///////\\\_______/\\\////////__
"      _\//\\\______/\\\______\/\\\_____\/\\\//\\\____/\\\//\\\_\/\\\_____\/\\\_____/\\\/___________
"       __\//\\\____/\\\_______\/\\\_____\/\\\\///\\\/\\\/_\/\\\_\/\\\\\\\\\\\/_____/\\\_____________
"        ___\//\\\__/\\\________\/\\\_____\/\\\__\///\\\/___\/\\\_\/\\\//////\\\____\/\\\_____________
"         ____\//\\\/\\\_________\/\\\_____\/\\\____\///_____\/\\\_\/\\\____\//\\\___\//\\\____________
"          _____\//\\\\\__________\/\\\_____\/\\\_____________\/\\\_\/\\\_____\//\\\___\///\\\__________
"           ______\//\\\________/\\\\\\\\\\\_\/\\\_____________\/\\\_\/\\\______\//\\\____\////\\\\\\\\\_
"            _______\///________\///////////__\///______________\///__\///________\///________\/////////__
" ==================================================================================================================================================

" We want the latest vim settings/options, it must be first because it changes other options as a side effect
set nocompatible

"-------------COMMON_SETTING-------------"
filetype plugin indent on                    " Detect files type
set backspace=indent,eol,start        " Make backspace behave like every other editor
set t_Co=256                          " use 256 colors.
syntax on                             " Enable syntax highlighting
syntax enable
set autoread                          " Read open files again when changed outside Vim
set autowrite                         " Write a modified buffer on each :next , ...
set history=200                       " Keep 200 lines of command line history
set incsearch                         " Find the next match as we type the search
set hlsearch                          " Highlight searches by default
set ignorecase                        " Ignore case when searching...
set smartcase                         " ...unless we type a capital
set listchars=""                      " Empty the listchars
set listchars=tab:>.                  " A tab will be displayed as >...
set listchars+=trail:.                " Trailing white spaces will be displayed as .
set nobackup                          " Don't constantly write backup files
set nowritebackup
set noswapfile                        " Ain't nobody got time for swap files
set noerrorbells                      " Don't beep
" set nowrap                            " Do not wrap lines
set showcmd                           " Display incomplete commands in the bottom line of the screen
set visualbell                        " Visual bell instead of beeping
set laststatus=2                      " Always display the status line
set encoding=UTF-8
set clipboard^=unnamed,unnamedplus
set splitright
set splitbelow
set autoindent
set si                                "smart indent
set hidden
set number                            " Let's active line number
set relativenumber                    " look to your left screen
set showmatch
set nofixendofline
set termguicolors
" set shell=bash
" set conceallevel=0                  "Concealing Characters
" set autowriteall                      " Automatically write the file when switching buffer

"-------------AUTOCOMPLETE-------------"
set omnifunc=syntaxcomplete#Complete
set complete=.,w,b,u                  " Set our desired autocompletion matching

augroup FileType_Local_tabwidth " {{{
  autocmd!
  au FileType nginx setlocal tabstop=4 shiftwidth=4 expandtab
  au FileType php setlocal tabstop=4 shiftwidth=4 expandtab softtabstop=4
  au FileType prisma setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType typescriptreact setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType scheme setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType typescript setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType yaml setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType json setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType yml setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType vim setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType sh setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType zsh setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType javascript setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType pegjs setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType javascript.jsx setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType pug setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType html setlocal tabstop=2 shiftwidth=2 expandtab
  au FileType vue setlocal tabstop=2 shiftwidth=2 expandtab
  au FileType eruby setlocal tabstop=2 shiftwidth=2 expandtab
  au FileType scss setlocal tabstop=2 shiftwidth=2 expandtab iskeyword+=@-@
  au FileType ruby setlocal tabstop=2 shiftwidth=2 expandtab
  au FileType cs setlocal tabstop=4 shiftwidth=4 expandtab
  au FileType html.erb setlocal tabstop=2 shiftwidth=2 expandtab
  au FileType html.handlebars setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType apache setlocal commentstring=#\ %s
  au FileType gitconfig setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
  au FileType make set noexpandtab
augroup END
" }}}

" Fold --------------{{{
augroup Filetype_js_ts
  au!
  au FileType javascript,typescript setlocal foldmethod=indent foldnestmax=3 nofoldenable
augroup END

augroup Filetype_php
  au!
  au FileType php setlocal foldmethod=indent foldnestmax=3 nofoldenable
augroup END

augroup Filetype_vim
  au!
  au FileType vim setlocal foldmethod=marker foldenable
augroup END

augroup Filetype_zsh
  au!
  au FileType zsh setlocal foldmethod=marker foldenable
augroup END

" }}}

" =====Ignore_compiled_files===== {{{
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
" }}}

" ==========Mapping========== {{{
noremap <space> :
" nnoremap j jzz
" nnoremap k kzz
nnoremap <Leader>ev :tabedit $HOME/.vimrc<cr>
" Add simple hightlight removal
nnoremap <ESC><ESC> :nohlsearch<cr>
nnoremap <Leader>qq :bd<CR>
" nnoremap <C-o> :tabedit<cr>:NERDTreeToggle<cr>
" quicker with space w <cr>
map <Leader>w :w!<cr>

nnoremap <leader>sc mqA;<esc>`q
nnoremap <leader>ss :source %<cr>

" Mapping for managing tab
" map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove<cr>
map <leader>tt :tabnext<cr>
map <leader>tp :tabprevious<cr>

" move a line up/down
" move line mappings
" ∆ is <A-j> on macOS
" ˚ is <A-k> on macOS
nnoremap ∆ :m .+1<cr>==
nnoremap ˚ :m .-2<cr>==
inoremap ∆ <Esc>:m .+1<cr>==gi
inoremap ˚ <Esc>:m .-2<cr>==gi
vnoremap ∆ :m '>+1<cr>gv=gv
vnoremap ˚ :m '<-2<cr>gv=gv

vnoremap $( <esc>`>a)<esc>`<i(<esc>
vnoremap $[ <esc>`>a]<esc>`<i[<esc>
vnoremap ${ <esc>`>a}<esc>`<i{<esc>
vnoremap $" <esc>`>a"<esc>`<i"<esc>
vnoremap $' <esc>`>a'<esc>`<i'<esc>
vnoremap $\ <esc>`>o*/<esc>`<O/*<esc>
vnoremap $< <esc>`>a><esc>`<i<<esc>

nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap J mzJ`z
" Buffer management
" Close the current buffer
map <leader>bd :Bclose<cr>:tabclose<cr>gT
" Next/Previous between buffers
map <leader>l :bnext<cr>
map <leader>h :bprevious<cr>

" to the first none blank char of line
noremap <S-H> ^
noremap <S-L> $
vnoremap <S-H> ^
vnoremap <S-L> $h

" make Y consistent with C and D.
nnoremap Y y$

nnoremap <CR> G
" Open terminal
nnoremap <Leader>at :call OpenFloatTerm()<CR>
" Open node REPL
nnoremap <Leader>an :call OpenFloatTerm('"node"')<CR>
nnoremap <Leader>ar :call OpenFloatTerm('"irb"')<CR>
" Open tig, yes TIG, A FLOATING TIGGGG!!!!!!
nnoremap <Leader>ag :call OpenFloatTerm('"tig"')<CR>
" nnoremap <leader>g :silent execute "grep! -R" . shellescape(expand("<cWORD>")) . " ."<cr>:copen<cr>

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>

inoremap jk <esc>
" Operation mapping
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap il( :<c-u>normal! F(vi(<cr>
onoremap p i(

" }}}


function! ToggleBg()
  if &bg == 'dark'
    let &bg = 'light'
    highlight colorcolumn guibg=#48ff67
  else
    let &bg='dark'
    highlight colorcolumn guibg=#A676EF
  endif
endfunction

function! RenameFile()
  let old_name = expand("%")
  let new_name = input('New file Name:', expand('%'), 'file')
  if new_name !=# '' && new_name !=# old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction

function! VisualSelection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'b'
    execute "normal ?" . l:pattern . "^M"
  elseif a:direction == 'gv'
    call CmdLine("Ack \"" . l:pattern . "\" " )
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
  elseif a:direction == 'f'
    execute "normal /" . l:pattern . "^M"
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction "--------------FloatingWindows {{{
if has('nvim')
  function! OpenFloatTerm(...)
    " Configuration
    let height = float2nr((&lines - 2) * 0.6)
    let row = float2nr((&lines - height) / 2)
    let width = float2nr(&columns * 0.6)
    let col = float2nr((&columns - width) / 2)
    " Border Window
    let border_opts = {
          \ 'relative': 'editor',
          \ 'row': row - 1,
          \ 'col': col - 2,
          \ 'width': width + 4,
          \ 'height': height + 2,
          \ 'style': 'minimal'
          \ }
    " Terminal Window
    let opts = {
          \ 'relative': 'editor',
          \ 'row': row,
          \ 'col': col,
          \ 'width': width,
          \ 'height': height,
          \ 'style': 'minimal'
          \ }
    let top = "╭" . repeat("─", width + 2) . "╮"
    let mid = "│" . repeat(" ", width + 2) . "│"
    let bot = "╰" . repeat("─", width + 2) . "╯"
    let lines = [top] + repeat([mid], height) + [bot]
    let bbuf = nvim_create_buf(v:false, v:true)
    call nvim_buf_set_lines(bbuf, 0, -1, v:true, lines)
    let s:float_term_border_win = nvim_open_win(bbuf, v:true, border_opts)
    let buf = nvim_create_buf(v:false, v:true)
    let s:float_term_win = nvim_open_win(buf, v:true, opts)
    " Styling
    call setwinvar(s:float_term_border_win, '&winhl', 'Normal:Normal')
    call setwinvar(s:float_term_win, '&winhl', 'Normal:Normal')
    if a:0 == 0
      terminal
    else
      call termopen(a:1)
    endif
    startinsert
    " Close border window when terminal window close
    autocmd TermClose * ++once :bd! | call nvim_win_close(s:float_term_border_win, v:true)
  endfunction
endif
" }}}

"--------------visuals--------------"

" #A676EF
highlight colorcolumn guibg=#A676EF

autocmd! InsertEnter * set colorcolumn=80 |
  \ set norelativenumber |
  \ set conceallevel=0
autocmd! InsertLeave * set colorcolumn=0 |
  \ set relativenumber |
  \ set conceallevel=2



" highlight Comment guifg=darkcyan
set guioptions-=e
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R
set cursorline                                  "highlight current line
set title
autocmd BufWritePre * %s/\s\+$//e               "Auto remove trailing space

" Don't redraw while executing macros (good performance config)
set lazyredraw

" {{{


" ---------EASY_MOTION-----{{{
let g:EasyMotion_do_mapping = 0
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case-insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
" }}}

"-------------editor_config-------------
" play nice with fugitive
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" Vimspector config
" let g:vimspector_enable_mappings = 'VISUAL_STUDIO'

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif

"Automatically source the Vimrc file on save.
augroup autosourcing
  autocmd!
  autocmd BufWritePost *vimrc source %
augroup END

" Folding cheat sheet
" zR    open all folds
" zM    close all folds
" za    toggle folds at cursor position
" zj    move down to start of next fold
" zk    move up to end of previous fold
"
" ":p   print last executed command to the buffer
" @=    reruns the last command
" gv    select the previous visual mode
" co .  copy the range to the current line, eg: co +3